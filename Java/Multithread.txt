/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Main.java to edit this template
 */
package multithread;

/**
 *
 * @author Veteran
 */
public class MultiThread {
       private static int sum=0;
    public static void main(String[] args) {
        Thread thread1=new Thread(()->addNumbers(1,50));
        Thread thread2=new Thread(()->addNumbers(51,100));
        Thread thread3=new Thread(()->addNumbers(101,150));
        Thread thread4=new Thread(()->addNumbers(151,200));
        
        thread1.start();
        thread2.start();
        thread3.start();
        thread4.start();
        
        try{
        thread1.join();
        thread2.join();
        thread3.join();
        thread4.join();
            System.out.println("sum of number from 1-200 is: "+sum);
        }catch(Exception e){
            e.printStackTrace();
        }
    }
    
    private static void addNumbers(int start,int end){
        for(int i=start;i<=end;i++){
        sum+=1;
        }
    }
    
}

// other code
public class ThreadClassDemo {

    public static void main(String[] args) {
        Runnable hello = new DisplayMessage("Hello");
        Thread thread1 = new Thread(hello);
        thread1.setDaemon(true);
        thread1.setName("hello");
        System.out.println("Starting hello thread...");
        thread1.start();

        Runnable bye = new DisplayMessage("Goodbye");
        Thread thread2 = new Thread(bye);
        thread2.setPriority(Thread.MIN_PRIORITY);
        thread2.setDaemon(true);
        System.out.println("Starting goodbye thread...");
        thread2.start();

        System.out.println("Starting thread3...");
        Thread thread3 = new GuessANumber(27);
        thread3.start();
        try {
            thread3.join();
        } catch (InterruptedException e) {
            System.out.println("Thread interrupted.");
        }
        System.out.println("Starting thread4...");
        Thread thread4 = new GuessANumber(75);
        thread4.start();
        System.out.println("main() is ending...");
    }
}

class DisplayMessage implements Runnable {
    private String message;

    public DisplayMessage(String message) {
        this.message = message;
    }

    public void run() {
        while (true) {
            System.out.println(message);
        }
    }
}

class GuessANumber extends Thread {
    private int number;

    public GuessANumber(int number) {
        this.number = number;
    }

    public void run() {
        int counter = 0;
        int guess = 0;
        do {
            guess = (int) (Math.random() * 100 + 1);
            System.out.println(this.getName() + " guesses " + guess);
            counter++;
        } while (guess != number);
        System.out.println("** Correct!" + this.getName() + " in " + counter + " guesses. **");
    }
}
